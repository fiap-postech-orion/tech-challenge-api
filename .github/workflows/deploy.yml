name: 'CI/CD Pipeline'

on:
  pull_request:
    branches: [ "main" ]
    types: [ closed ]

env:
  ECR_REPOSITORY: 084477714284.dkr.ecr.us-east-1.amazonaws.com/techchallenge-eks
  IMAGE_NAME: docker-image

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks out your repository code so that it can be built
      - name: Checkout
        uses: actions/checkout@v2

      # Sets up JDK 17, which is required for building Java applications using Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # Caches Maven dependencies to speed up subsequent builds
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      # Builds the application using Maven, skipping tests to save time
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Sets up AWS credentials and logs into ECR
      - name: Call AWS Setup Workflow
        uses: ./.github/workflows/aws-setup.yml

      # Builds the Docker image
      - name: Build Docker image
        run: docker build -t techchallenge-eks .

      # Tags the Docker image with the ECR repository URL
      - name: Tag Docker image
        run: docker tag techchallenge-eks:latest ${{ env.ECR_REPOSITORY }}:latest

      # Saves the Docker image as an artifact
      - name: Save Docker image as artifact
        run: docker save techchallenge-eks:latest -o techchallenge-eks.tar

      # Uploads the Docker image artifact to be used in the deploy job
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ./techchallenge-eks.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Call AWS Setup Workflow
        uses: ./.github/workflows/aws-setup.yml

      # Downloads the Docker image artifact from the previous job
      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}

      # Loads the Docker image from the artifact
      - name: Load Docker image
        run: docker load -i ./techchallenge-eks.tar

      - name: Push Docker image to ECR
        run: docker push ${{ env.ECR_REPOSITORY }}:latest

  kubernetes_update:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Call AWS Setup Workflow
        uses: ./.github/workflows/aws-setup.yml

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Set up EKS kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name techchallenge-cluster-eks

      - name: Apply Kubernetes configuration
        run: kubectl apply -f k8s/app.yaml
